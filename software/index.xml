<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Softwares | TESLa | CU</title><link>https://teslacu.org/software/</link><atom:link href="https://teslacu.org/software/index.xml" rel="self" type="application/rss+xml"/><description>Softwares</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â©</copyright><lastBuildDate>Wed, 01 Jan 2020 00:00:00 +0000</lastBuildDate><image><url>https://teslacu.org/images/logo_hu135bca77aa614af613f5ab7a46762921_9259_300x300_fit_lanczos_2.png</url><title>Softwares</title><link>https://teslacu.org/software/</link></image><item><title>amrPOD</title><link>https://teslacu.org/software/amrpod/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://teslacu.org/software/amrpod/</guid><description>&lt;p>Adaptive mesh refinement (AMR) plays a fundamental role in simulating particular flow phenomena that have vastly different resolution requirements throughout the computational domain. Proper orthogonal decomposition (POD), on the other hand, serves as a popular tool to extract coherent structures from the fluid data and build reduced order models. We present a new method to perform POD on AMR data sets that eliminates repeated operations that arise from using nearest neighbor interpolation of the data onto a uniform grid before performing POD. More fundamentally, we believe that this is the first algorithm to eliminate redundant operations for matrix multiplications with repeated values in each matrix.&lt;/p>
&lt;p>We provide all code
&lt;a href="https://github.com/tesla-cu/amrPOD" target="_blank" rel="noopener">here&lt;/a> for &lt;code>amrPOD&lt;/code> to evaluate the efficiency of the algorithm as shown in the
&lt;a href="https://github.com/tesla-cu/amrPOD" target="_blank" rel="noopener">paper&lt;/a>. Specifically, we stress the algorithm using synthetically generated AMR data to identify where the new algorithm out performs standard matrix operations since the new algorithm requires additional overhead of checking the grid level at various locations. Additionally, we show with genuine AMR data of an axisymmetric buoyant jet and a compiled and optimized version of the code, our algorithm reduces the CPU time. Details of how to use the code are provided in the &lt;code>README.md&lt;/code> on
&lt;a href="https://github.com/tesla-cu/amrPOD" target="_blank" rel="noopener">github&lt;/a>.&lt;/p></description></item><item><title>BFM17</title><link>https://teslacu.org/software/bfm17/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://teslacu.org/software/bfm17/</guid><description>&lt;p>The Biogeochemical Flux Model (BFM) is a computational model of biological and chemical oceanographic processes. BFM is able to track dissolved organic matter, particulate organic matter, nutrients, dissolved gases, and various phytoplankton and zooplankton groups. The full BFM has 56 state variables and therefore is referred to as BFM56. The model includes a bacteria group, 2 microzooplankton groups, 2 mesozooplankton groups, and 4 phytoplankton groups. In an effort to study the effects of upper ocean turbulence on the biogeochemical processes, we would like to couple BFM with a large-eddy simulation (LES) code. BFM56 is too large to be coupled to a LES model for process studies of small scale ocean dynamics. A lighter model needed to be developed for future work.&lt;/p>
&lt;p>A reduced model has been produced by simplifying BFM56 to 17 state variables, and is therefore called BFM17. The reduced model has only 1 generic zooplankton group and 1 generic phytoplankton group. BFM17 eliminated the bacteria group by assuming constant remineralization rates between the detritus and nutrients.&lt;/p>
&lt;p>BFM has been coupled to a one-dimensional version of the Princeton Ocean Model (POM1D). POM1D is used to simulate a column of water through time. It can be run in prognostic mode or diagnostic mode. Prognostic mode simulates all of the dynamics of a water column, while diagnostic mode can be used to force the physics with prescribed temperature and salinity profiles.&lt;/p>
&lt;p>The code, available at the git repository linked above, has both BFM56 and BFM17 run options with POM1D. The code has been set up to model phytoplankton bloom dynamics at the Sargasso Sea. POM1D is being run in diagnostic mode using data from the Bermuda Atlantic Time-series and the Bermuda Testbed Mooring to prescribe temperature, salinity, and boundary conditions. BFM56 and BFM17 have been shown in previous work to produce comparable results.&lt;/p></description></item><item><title>diffusionFireFoam</title><link>https://teslacu.org/software/diffusionfirefoam/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://teslacu.org/software/diffusionfirefoam/</guid><description>&lt;p>diffusionFireFoam is an extension of fireFoam, an OpenFOAM solver for &amp;ldquo;&amp;hellip;fires and turbulent diffusion flames with reacting particle clouds, surface film and pyrolysis modelling.&amp;rdquo; It is a stripped-down version of fireFoam designed specifically for simulation of turbulent diffusion flames and employs adaptive mesh refinement (AMR) to increase simualtion efficiency without sacrificing accuracy by updating the computational mesh at runtime and adding resolution only in regions of interest (e.g. where reactions are occuring). The solver has been shown to accurately reproduce results from static (i.e. time-invariant) simulaitons as well as experimental data.&lt;/p></description></item><item><title>turbABC</title><link>https://teslacu.org/software/turbabc/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://teslacu.org/software/turbabc/</guid><description>&lt;p>Approximate Bayesian Computation (ABC) is a data-driven approach, which uses experimental or higher fidelity data to
approximate the probability distribution of model parameters. ABC is based on the Bayesian approach but does not
require knowing the analytical expression for a likelihood function. The primary advantages of ABC are its lower
cost relative to full Bayesian methods and its flexibility in parameter estimation for complex models, e.g.,
turbulence models, which consist of partial differential equations.&lt;/p>
&lt;p>
&lt;a href="https://github.com/olgadoronina/turbABC" target="_blank" rel="noopener">&lt;code>turbABC&lt;/code>&lt;/a> combines ABC with Markov chain Monte Carlo (ABC-MCMC) sampling, an adaptive proposal, and calibration
steps to accelerate the parameter estimation process. It is extremely flexible and applicable to a
large suite of problems.&lt;/p></description></item><item><title>wildFireFoam</title><link>https://teslacu.org/software/wildfirefoam/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>https://teslacu.org/software/wildfirefoam/</guid><description>&lt;p>wildFireFoam is an extension of fireFoam, an OpenFOAM solver for &amp;ldquo;&amp;hellip;fires and turbulent diffusion flames with reacting particle clouds, surface film and pyrolysis modelling.&amp;rdquo; It retains all functionality originally included in fireFoam for efficient simulation of complex fire phenomena. Similar to diffusionFireFoam, it also incorporates adaptive mesh refinement (AMR) to increase simualtion efficiency without sacrificing accuracy by updating the computational mesh at runtime and adding resolution only in regions of interest (e.g. where reactions are occuring). It has been designed specifically to reduce computational cost of fire spread and suppression simulations for use in outer-loop processes (e.g. optimization and uncertainty quantification).&lt;/p></description></item><item><title>spectralLES</title><link>https://teslacu.org/software/spectralles/</link><pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate><guid>https://teslacu.org/software/spectralles/</guid><description>&lt;p>&lt;code>SpectralLES&lt;/code> is a pure-Python pseudospectral large eddy simulation solver for educational instruction and model development based upon the
&lt;a href="https://github.com/spectralDNS/spectralDNS/blob/master/spectralDNS3D_short.py" target="_blank" rel="noopener">&lt;code>spectralDNS3D_short&lt;/code>&lt;/a> CFD simulation code written by Mikael Mortensen.&lt;/p></description></item></channel></rss>